/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


// keymap-drawer config: https://github.com/caksoylar/keymap-drawer?tab=readme-ov-file#zmk-locale-headers
#ifndef KEYMAP_DRAWER
#include "keys_abnt2.h"
#endif

/* Layers */
#define ALPHAS 0
#define EDIT 1
#define SYMBOLS 2
#define NUMBERS 3

/* Shortcuts */
#define CUT LS(DEL)
#define COPY LC(INS)
#define PASTE LS(INS)
#define UNDO LC(Z)
#define ALL LC(A)
#define TOP LC(HOME)
#define BOTTOM LC(END)

/* Mod Sequence (Outer to Inner) */
#define M0 LALT
#define M1 LSHFT
#define M2 LGUI
#define M3 LCTRL

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
        chosen { zmk,matrix_transform = &five_column_transform; };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <EDIT SYMBOLS>;
                then-layer = <NUMBERS>;
            };
        };

        behaviors {
            paste: paste_with_values {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp PASTE>, <&kp LC(LS(V))>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            home: home_ignoring_ctrl {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp HOME>, <&kp HOME>;
                mods = <(MOD_LCTL|MOD_RCTL)>;
            };
            end: end_ignoring_ctrl {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp END>, <&kp END>;
                mods = <(MOD_LCTL|MOD_RCTL)>;
            };
            bspc: backspace_delete {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp BSPC>, <&kp DEL>;
                mods = <(MOD_LSFT|MOD_RSFT)>;
            };
            plus: plus_zoom {
                compatible = "zmk,behavior-mod-morph";
                #binding-cells = <0>;
                bindings = <&kp PLUS>, <&kp LC(EQUAL)>;
                mods = <(MOD_LCTL|MOD_RCTL)>;
            };
        };

        combos {
                compatible = "zmk,combos";
        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
            20  21  22  23  24     25  26  27  28  29
                    30  31  32     33  34  35          */
          combo_acute {
                    timeout-ms = <50>;
                    key-positions = <7 8>;
                    bindings = <&kp BR_ACUT>;
          };
          combo_grave {
                    timeout-ms = <50>;
                    key-positions = <6 7>;
                    bindings = <&kp BR_GRV>;
          };
          combo_tilde {
                    timeout-ms = <50>;
                    key-positions = <6 7 8>;
                    bindings = <&kp BR_TILD>;
          };
          combo_circ {
                    timeout-ms = <50>;
                    key-positions = <6 8>;
                    bindings = <&kp BR_CIRC>;
          };

          /* Parenteses: ( and ) */
          lbrc { key-positions = <3 13>; bindings = <&kp BR_LPRN>; };
          rbrc { key-positions = <6 16>; bindings = <&kp BR_RPRN>; };
          
          /* Brackets: { and } */
          lbkt { key-positions = <1 11>; bindings = <&kp BR_LCBR>; };
          rbkt { key-positions = <8 18>; bindings = <&kp BR_RCBR>; };

          /* Braces: [ and ] */
          lpar { key-positions = <2 12>; bindings = <&kp BR_LBRC>; };
          rpar { key-positions = <7 17>; bindings = <&kp BR_RBRC>; };

          /* Slashes */
          /* bsls { key-positions = <4 14>; bindings = <&kp BR_BSLS>; }; */
          /* slsh { key-positions = <5 15>; bindings = <&kp BR_SLSH>; }; */

          /* Quotes */
          single_quote { key-positions = <4 14>; bindings = <&kp BR_DQUO>; };
          double_quote { key-positions = <5 15>; bindings = <&kp BR_QUOT>; };

          /* Convenience */
          esc { key-positions = <0 10>; bindings = <&kp ESC>; };

          /* Modifiers */
          lctrl { key-positions = <23 24>; bindings = <&kp LCTRL>; };
          rctrl { key-positions = <25 26>; bindings = <&kp LCTRL>; };
        };    

        keymap {
                compatible = "zmk,keymap";

                alphas_layer {
                        display-name = "alphas";
                        bindings = <
   &kp Q  &kp W  &kp E     &kp R       &kp T              &kp Y        &kp U      &kp I      &kp O   &kp P         
   &kp A  &kp S  &kp D     &kp F       &kp G              &kp H        &kp J      &kp K      &kp L   &kp SEMI  
   &kp Z  &kp X  &kp C     &kp V       &kp B              &kp N        &kp M      &kp COMMA  &kp DOT &kp FSLH       
                 &kp ESC   &kp LSHIFT  &mo EDIT           &mo SYMBOLS  &kp SPACE  &kp LGUI
                        >;
                };
                edit_layer {
                        display-name = "edit";
                        bindings = <
   &kp ALL  &none    &kp UNDO  &none    &none          &none     &home     &kp UP     &end       &kp TOP         
   &kp M0   &kp M1   &kp M2    &kp M3   &none          &none     &kp LEFT  &kp RET    &kp RIGHT  &kp BOTTOM  
   &kp Z    &kp CUT  &kp COPY  &paste   &none          &none     &kp BSPC  &kp DOWN   &kp TAB    &none       
                     &trans    &trans   &trans         &trans    &trans    &trans
                        >;
                };
                symbols_layer {
                        display-name = "symbols";
                        bindings = <
   &kp BR_EXLM  &kp BR_AT  &kp BR_HASH    &kp BR_DLR   &kp BR_PERC          &kp BR_DIAE    &kp BR_AMPR  &kp BR_ASTR  &kp  BR_COLN   &kp BR_QUES         
   &kp BR_TILD  &kp EQUAL  &kp LS(EQUAL)  &kp BR_ASTR  &kp BR_GRV           &kp BR_BSLS    &kp M3       &kp M2       &kp M1         &kp M0  
   &none        &kp UNDER  &kp MINUS      &kp BR_SLSH  &none                &none          &kp BR_PIPE  &kp LT       &kp GT         &none       
                           &trans         &trans       &trans               &trans   &trans  &trans
                        >;
                };
                numbers_layer {
                        display-name = "numbers";
                        bindings = <
   &trans  &kp N7  &kp N8  &kp N9  &trans         &trans   &trans  &trans     &trans   &trans         
   &none   &kp N4  &kp N5  &kp N6  &trans         &trans   &kp M3  &kp M2     &kp M1   &kp M0  
   &kp N0  &kp N1  &kp N2  &kp N3  &trans         &trans   &trans  &kp COMMA  &kp DOT  &none       
                   &trans  &trans  &trans         &trans   &trans  &trans
                        >;
                };

        };
};
