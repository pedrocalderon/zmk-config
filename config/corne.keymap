/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define QWERTY       0

/* Shortcuts */
#define SLALL LC(A)

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
        chosen { zmk,matrix_transform = &five_column_transform; };

        behaviors {
            lhm: left_homerow_mods {
                  compatible = "zmk,behavior-hold-tap";
                  #binding-cells = <2>;
                  tapping-term-ms = <200>;
                  quick-tap-ms = <200>;
                  flavor = "tap-preferred";
                  require-prior-idle-ms = <125>;
                  bindings = <&kp>, <&kp>;
                  hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            };
            rhm: right_homerow_mods {
                  compatible = "zmk,behavior-hold-tap";
                  #binding-cells = <2>;
                  tapping-term-ms = <200>;
                  quick-tap-ms = <200>;
                  flavor = "tap-preferred";
                  require-prior-idle-ms = <125>;
                  bindings = <&kp>, <&kp>;
                  hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            };
        };

        combos {
                compatible = "zmk,combos";
        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
            20  21  22  23  24     25  26  27  28  29
                    30  31  32     33  34  35          */
          combo_acute {
                    timeout-ms = <50>;
                    key-positions = <7 8>;
                    bindings = <&kp APOS>;
          };
          combo_grave {
                    timeout-ms = <50>;
                    key-positions = <6 7>;
                    bindings = <&kp GRAVE>;
          };
          combo_tilde {
                    timeout-ms = <50>;
                    key-positions = <6 7 8>;
                    bindings = <&kl TILDE>;
          };

          /* Brackets */
          lbkt { key-positions = <0 10>; bindings = <&kp LESS_THAN>; };
          lbkt { key-positions = <9 10>; bindings = <&kp GREATER_THAN>; };
          lbkt { key-positions = <1 11>; bindings = <&kp LBKT>; };
          rbkt { key-positions = <8 18>; bindings = <&kp RBKT>; };
          lpar { key-positions = <2 12>; bindings = <&kp LPAR>; };
          rpar { key-positions = <7 17>; bindings = <&kp RPAR>; };
          lbrc { key-positions = <3 13>; bindings = <&kp LBRC>; };
          rbrc { key-positions = <6 16>; bindings = <&kp RBRC>; };

          /* Convenience */
          del { key-positions = <4 14>; bindings = <&kp BSPC>; };
          esc { key-positions = <5 15>; bindings = <&kp ESC>; };
        };    

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        display-name = "QWERTY";
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T   |         |  Y  |  U     |  I  |  O  |  P  | 
// |  A  |  S  |  D  |  F  |  G   |         |  H  |  J     |  K  |  L  |  ;  | 
// |  Z  |  X  |  C  |  V  |  B   |         |  N  |  M     |  ,  |  .  |  /  | 
//             | ESC | TAB | BSPC |         | ENT | SPACE  | DEL |
                        bindings = <
   &kp Q  &kp W        &kp E           &kp R          &kp T              &kp Y       &kp U          &kp I         &kp O         &kp P         
   &kp A  &lhm LGUI S  &lhm LALT D     &lhm LCTRL F   &kp G              &kp H       &rhm LCTRL J   &rhm LALT K   &rhm LGUI L   &kp SEMI  
   &kp Z  &lhm RALT X  &kp C           &kp V          &kp B              &kp N       &kp M          &kp COMMA     &rhm RALT DOT &kp FSLH       
                       &kp ESC         &kp RSHIFT     &kp BSPC           &kp RET     &kp SPACE      &lt FUN DEL
                        >;
                };

        };
};
